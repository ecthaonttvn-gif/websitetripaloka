(function($){
	$(document).ready(function(){

        document.querySelectorAll('a').forEach(link => {
            const isExternal = link.hostname && link.hostname !== window.location.hostname;
            if (isExternal) {
                link.target = '_blank';
                link.rel = 'noopener noreferrer';
            }
        });

		// Theme list button toggle
		$( '.theme-list-load-more a' ).on( 'click', function() {
			var $this = $( this );
			var less = $this.find( 'span' ).toggle();
			if ( $this.hasClass( 'less' ) ) {
				$this.closest( '.module' ).nextAll().slideUp();
				$( this ).removeClass( 'less' );
			} else {
				$this.closest( '.module' ).nextAll().slideDown();
				$( this ).addClass( 'less' );
			}
		});

		// Docs
		var docsNav = '';
		$('#content .docs h3').each(function(){
			var anchorId = $(this).prop('id'),
				title = $(this).text();
			if ( '' !== anchorId ) {
				docsNav += '<li><a href="#'+ anchorId +'">' + title + '</a></li>';
			}
		});

		if ( docsNav.length > 0 ) {
  			$('#sidebar .sidebar-inner').html( '<a id="toc_toggle" href="#doc_toc"></a><ol id="doc_toc" class="toc tf_scrollbar">' + docsNav + '</ol>' );
  			// Apply nicescroll to desktop
  			if ( !themifyScript.is_mobile && 'undefined' !== typeof $.fn.niceScroll ) {
	  			$('#sidebar .sidebar-inner').niceScroll(); // apply nice scroll
				var didScroll = false;
	  			$(window).on('scroll', function(){
	  				didScroll = true;
	  			});
	  			setInterval(function(){
	  				if ( didScroll ) {
	  					didScroll = false;
	  					$('#sidebar .sidebar-inner .toc').getNiceScroll().resize();
	  				}
	  			}, 500);
  			}
			document.tfId('toc_toggle').tfOn( 'click', function( e ) {
				e.preventDefault();
				this.nextElementSibling.classList.toggle('expanded');
			} );
		}
	});

	class GradientAnimation {
		constructor( container ) {
			this.container = container;
			this.cnv        = document.createElement('canvas');
			this.ctx        = this.cnv.getContext('2d');
			this.cnv.setAttribute( 'style', 'pointer-events: none;height:100%;display:block;width:100%;' );
			container.appendChild( this.cnv );

			this.circlesNum = parseInt( container.dataset.circlesNum ) || 6;
			this.minRadius  = parseInt( container.dataset.minRadius ) || 200;
			this.maxRadius  = parseInt( container.dataset.maxRadius ) || 400;
			this.speed      = parseFloat( container.dataset.speed ) || .008;
			if ( container.dataset.colors ) {
				this.colors = container.dataset.colors.split(',');
			} else {
				this.colors = [ '#f2e1ff', '#d5ffda', '#fff9cf' ];
			}
			this.colors = [].concat(... new Array( Math.ceil( this.circlesNum / this.colors.length ) ).fill( this.colors )); /* ensure we have at least circlesNum colors */
            this.colors = this.colors.map(value => ({ value, sort: Math.random() })).sort((a, b) => a.sort - b.sort).map(({ value }) => value); /* randomize the order */
			this.height = parseInt( container.dataset.height ) || 800;

			this.setCanvasSize();
			this.createCircles();
			this.drawAnimation();
		}
		setCanvasSize() {
			this.w = this.container.clientWidth;
			this.cnv.width = this.w;
			this.cnv.height = this.height;
			this.ctx.scale(devicePixelRatio, devicePixelRatio)
		}
		createCircles() {
			this.circles = [];
			for (let i = 0 ; i < this.circlesNum ; ++i) {
				this.circles.push( new Circle( this.w, this.height, this.minRadius, this.maxRadius, this.colors[i] ) );
			}
		}
		drawCircles() {
			this.circles.forEach(circle => circle.draw(this.ctx, this.speed));
		}
		clearCanvas() {
			this.ctx.clearRect(0, 0, this.w, this.height); 
		}
		drawAnimation() {
			this.clearCanvas();
			this.drawCircles();
			window.requestAnimationFrame(() => this.drawAnimation());
		}
	}

	class Circle {
		constructor(w, h, minR, maxR, color) {
			this.x = this.randomInt( ( w / 8) * 2, ( w / 8 ) * 3 );
			this.y = Math.random() * ( h / 2 );
			this.angle  = Math.random() * Math.PI * 2;
			this.radius = Math.random() * (maxR - minR) + minR;
			this.firstColor  = color;
			this.secondColor = color + '00';
		}
		randomInt(min, max) {
			return Math.floor(Math.random() * (max - min + 1) + min);
		}
		draw(ctx, speed) {
			this.angle += speed;
			const x = this.x + Math.cos(this.angle) * 200;
			const y = this.y + Math.sin(this.angle) * 200;
			const gradient = ctx.createRadialGradient(x, y, 0, x, y, this.radius);
			gradient.addColorStop(0, this.firstColor);
			gradient.addColorStop(1, this.secondColor);

			ctx.fillStyle = gradient;
			ctx.beginPath();
			ctx.arc(x, y, this.radius, 0, Math.PI * 2);
			ctx.fill(); 
		}
	}

    const promoClose = document.getElementsByClassName('promo-toggle')[0];
    if ( promoClose ) {
        promoClose.addEventListener( 'click', (e) => {
            document.body.classList.add( 'promo-close' );
        } );
    }

	window.addEventListener( 'load', () => {
		const animatedCircles = document.getElementsByClassName( 'animated-circle' );
		for ( let i = 0; i < animatedCircles.length; i++ ) {
			new GradientAnimation( animatedCircles[ i ] );
		}
	}, { once : true } )
})(jQuery);
